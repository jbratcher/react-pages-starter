{"version":3,"sources":["components/Residence.jsx","components/Residences.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["App","props","state","residenceID","homeType","income","residents","name","incomeImpact","travel","resientID","residenceWorth","worthColor","modifyWorth","bind","max","Math","floor","random","currentWorth","this","modifyAmount","getRandomInt","sign","console","log","setState","setWorthColor","interval","setInterval","clearInterval","className","Component","getResidences","residences","residenceTotal","i","push","Residence","key","Residences","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"8PAsHeA,E,YAlHX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,CACTC,YAAa,EACbC,SAAU,SACVC,OAAQ,SACRC,UAAW,CACP,CACIC,KAAM,SACNC,aAAc,SACdC,OAAQ,OACRC,UAAW,GAEf,CACIH,KAAM,SACNC,aAAc,OACdC,OAAQ,OACRC,UAAW,IAGnBC,eAAgB,EAChBC,WAAY,UAEhB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAxBJ,E,0EA2BNC,GACT,OAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,M,oCAI7C,IAAII,EAAeC,KAAKlB,MAAMS,eAE1BU,EAAeD,KAAKE,aAAa,GAEjCC,EAAOP,KAAKE,UAAY,GAEzBK,GACCC,QAAQC,IAAR,6BAAkCJ,IAClCD,KAAKM,SAAS,CACVf,eAAiBQ,EAAeE,KAE7BE,IACPC,QAAQC,IAAR,4BAAiCJ,IACjCD,KAAKM,SAAS,CACVf,eAAiBQ,EAAeE,KAGxCD,KAAKO,cAAcR,K,sCAGN,IACNR,EAAkBS,KAAKlB,MAAvBS,eACJA,EAAiB,EAChBS,KAAKM,SAAS,CACVd,WAAY,UAEVD,EAAiB,GAAKA,EAAiB,EAC7CS,KAAKM,SAAS,CACVd,WAAY,WAEVD,GAAkB,GACxBS,KAAKM,SAAS,CACVd,WAAY,U,0CAwBpBQ,KAAKQ,SAAWC,YAAYT,KAAKP,YAAa,KAC9CW,QAAQC,IAAIL,KAAKlB,MAAMS,kB,6CAIvBmB,cAAcV,KAAKQ,Y,+BAGb,IAGFhB,EACAQ,KAAKlB,MADLU,WAGJ,OAEI,wBACImB,UAAS,0BAAqBnB,IAElC,8BAAOQ,KAAKlB,MAAMS,qB,GA7GZqB,aCgDHhC,E,YA7CX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KASVgC,cAAgB,WAOZ,IAPmB,IAAD,EAKd,EAAK/B,MAFLgC,EAHc,EAGdA,WACAC,EAJc,EAIdA,eAGKC,EAAI,EAAGA,EAAID,EAAgBC,IAChCF,EAAWG,KACP,kBAACC,EAAD,CACIC,IAAKH,KAKjB,OAAOF,GAtBP,EAAKhC,MAAQ,CACTiC,eAAgB,GAChBD,WAAY,IALD,E,iFA8BfV,QAAQC,IAAI,0B,+BAKZ,OAEI,4BACML,KAAKa,qB,GAxCLD,aCwBHhC,E,YArBX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACXgC,WAAY,IAHC,E,sEAWnB,OACE,6BAASH,UAAU,mCACjB,6BAASA,UAAU,aACjB,kBAACS,EAAD,Y,GAhBQR,aCQZS,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBtD,QACfgD,UAAUC,cAAcQ,YAI1BnC,QAAQC,IACN,iHAKEwB,GAAUA,EAAOW,UACnBX,EAAOW,SAASN,KAMlB9B,QAAQC,IAAI,sCAGRwB,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUP,UAO5BQ,MAAM,SAAAC,GACLvC,QAAQuC,MAAM,4CAA6CA,KC1FjEC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDcnB,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,qBAAwB1B,OAAOC,SAAS0B,MACpDC,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,OAAQ,WAC9B,IAAMxB,EAAK,UAAMqB,qBAAN,sBAEP5B,IAgEV,SAAiCO,EAAOC,GAEtCwB,MAAMzB,GACHK,KAAK,SAAAqB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C7B,UAAUC,cAAc6B,MAAM3B,KAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,KAAK,WAC7BV,OAAOC,SAASsC,aAKpBnC,EAAgBC,EAAOC,KAG1Ba,MAAM,WACLtC,QAAQC,IACN,mEArFA0D,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc6B,MAAM3B,KAAK,WACjC7B,QAAQC,IACN,gHAMJsB,EAAgBC,EAAOC,MCvC/BE,I","file":"static/js/main.3cd93673.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass App extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        // Don't call this.setState() here!\r\n        this.state = { \r\n            residenceID: 0,\r\n            homeType: \"single\",\r\n            income: \"medium\",\r\n            residents: [\r\n                {\r\n                    name: \"Jeremy\",\r\n                    incomeImpact: \"medium\",\r\n                    travel: \"bike\",\r\n                    resientID: 1,    \r\n                },\r\n                {\r\n                    name: \"Kimmel\",\r\n                    incomeImpact: \"high\",\r\n                    travel: \"bike\",\r\n                    resientID: 1,\r\n                },\r\n            ],\r\n            residenceWorth: 0,\r\n            worthColor: \"yellow\",\r\n        };\r\n        this.modifyWorth = this.modifyWorth.bind(this);\r\n    }\r\n\r\n    getRandomInt(max) {\r\n        return Math.floor(Math.random() * Math.floor(max));\r\n    }\r\n\r\n    modifyWorth() {\r\n        let currentWorth = this.state.residenceWorth;\r\n        // make a random roll to determine amount to adjust\r\n        let modifyAmount = this.getRandomInt(3);\r\n        // set positive or negative\r\n        let sign = Math.random() >= 0.5;\r\n        // modify residence\r\n        if(sign) {\r\n            console.log(`Changing worth by +${modifyAmount}`);\r\n            this.setState({\r\n                residenceWorth: (currentWorth + modifyAmount)\r\n              });\r\n        } else if(!sign) {\r\n            console.log(`Changing worth by ${modifyAmount}`);\r\n            this.setState({\r\n                residenceWorth: (currentWorth - modifyAmount)\r\n              });\r\n        }\r\n        this.setWorthColor(currentWorth);\r\n    }\r\n\r\n    setWorthColor() {\r\n        const {residenceWorth} = this.state;\r\n        if(residenceWorth > 5) {\r\n            this.setState({\r\n                worthColor: \"green\"\r\n            });\r\n        } else if(residenceWorth > 0 && residenceWorth < 5) {\r\n            this.setState({\r\n                worthColor: \"yellow\"\r\n            });\r\n        } else if(residenceWorth < -5) {\r\n            this.setState({\r\n                worthColor: \"red\"\r\n            });\r\n        }\r\n    }\r\n\r\n    // decreaseWorth() {\r\n    //     this.setState({\r\n    //         residenceWorth: this.state.residenceWorth - 1\r\n    //     });\r\n    //     this.setWorthColor();\r\n    //     console.log(\"Worth: -1\");\r\n    //     console.log(`Total Worth: ${this.state.residenceWorth}`);\r\n    // }\r\n\r\n    // increaseWorth() {\r\n    //     this.setState({\r\n    //         residenceWorth: this.state.residenceWorth + 1\r\n    //     });\r\n    //     this.setWorthColor();\r\n    //     console.log(\"Worth: +1\");\r\n    //     console.log(`Total Worth: ${this.state.residenceWorth}`);\r\n    // }\r\n\r\n    componentDidMount() {\r\n        this.interval = setInterval(this.modifyWorth, 1000);\r\n        console.log(this.state.residenceWorth);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n    }\r\n\r\n    render() {\r\n\r\n        const {\r\n            worthColor \r\n        } = this.state;\r\n\r\n        return (\r\n\r\n            <li \r\n                className={`residence house ${worthColor}`}\r\n            >\r\n            <span>{this.state.residenceWorth}</span>\r\n            </li>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport Residence from './Residence';\r\n\r\nclass App extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { \r\n            residenceTotal: 10,\r\n            residences: [],\r\n        };\r\n\r\n      }\r\n\r\n    getResidences = () => {\r\n    \r\n        const {\r\n            residences,\r\n            residenceTotal\r\n        } = this.state;\r\n        \r\n        for (let i = 0; i < residenceTotal; i++) {\r\n            residences.push(      \r\n                <Residence\r\n                    key={i}\r\n                />\r\n            )\r\n        }\r\n        \r\n        return residences;\r\n    \r\n    }\r\n  \r\n    componentDidMount() {\r\n        console.log(\"Creating residences.\");\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <ul>\r\n                { this.getResidences() }\r\n            </ul>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport './App.scss';\r\nimport Residences from './components/Residences';\r\n\r\nclass App extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n          residences: [],\r\n        };\r\n    }\r\n\r\n    \r\n\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"App container-fluid text-center\">\r\n        <section className=\"container\">\r\n          <Residences />\r\n        </section>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}